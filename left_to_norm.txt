
Fonctions a scinder en sous fonctions :

Parsing :

void	hd_expand(t_ht_hash_table *ht, t_token_list **t_list)
void	set_command_attributs(t_cmd **current, t_token_list **first_tk,
		t_token_list *current_tk, int args_count)
void	set_simple_command(t_cmd *current_cmd,
		t_token_list **curr_tk)
char	*get_subshell_command(t_token_list **curr_tk)
t_cmd	*get_ast(t_data *data)
void	get_expanded_token(t_ht_hash_table *ht,
		t_token_list **current, char *d_start)
int	    check_long_overflow(t_cmd *cmd, t_cmd *first)
void	read_lines(t_data *data)



Exec :

void	child_process(t_cmd *cmd, t_cmd *first, int pipe_tab[2])
void	wait_childs(t_cmd *origin)



----------------------------------------------------------------------------------------

Verifier les possibles valeurs de retour d'erreur de pwd et unset 

verifier que ht_delete marche encore bien corrctement (j'ai tej la statique HT_DELETED_ITEM, flemme qu'on nous mette faux pour ca)

Ecrire les erreurs de syntaxe sur STDERR 
Quand fait juste `./`, n'ecrit pas "is a directory"








wildcard_second_sort.c : 

int	search_and_assess_filename(t_token_list *current, int next_wildcard_index,
	char *f_pos, t_filename **filenames)
{
	char		*filename_pos;
	char		*to_find;
	t_filename	*tmp;
	
	to_find = ft_substr(current->content, i, next_wcard_index - i);
	filename_pos = ft_search_str_in_str(f_pos,
			to_find);
	free(to_find);
	to_find = NULL;
	if (!filename_pos)
	{
		tmp = *current_f;
		*current_f = (*current_f)->next;
		del_filename(filenames, tmp);
		return (0);
	}
	return (1);
}